states <- geojsonio::geojson_read("us-state.js", what = "sp")
states <- geojsonio::geojson_read("us-states.geojson", what = "sp")
install.packages("geojsonio")
states <- geojsonio::geojson_read("us-states.geojson", what = "sp")
states <- geojsonio::geojson_read("us-states.geojson", what = "sp")
states <- geojsonio::geojson_read("us-state.js", what = "sp")states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
states <- geojsonio::geojson_read("us-states.geojson", what = "sp")
states
names(states)
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
states <- geojsonio::geojson_read("us-states.geojson", what = "sp")
names(states)
class(states)
doc <- readLines('us-states,js')
doc <- readLines('us-states.js')
us-states
doc <- readLines('us-states.js')
doc <- readLines('us-states.js')
dox
doc
doc2 <- gsub("var statesData = ", "", doc)
doc2
The download file has a javascript assignment at the head. Removing it seems to fix the issue ,
library(geojson)
library(geojsonio)
url <- "http://leafletjs.com/examples/choropleth/us-states.js"
# read as text file
doc <- readLines(url)
# remove the javascript assignment at the front
doc2 <- gsub("var statesData = ", "", doc)
# write out as a temp file and read
write(doc2, file = "tempgeo.json")
The download file has a javascript assignment at the head. Removing it seems to fix the issue ,
library(geojson)
library(geojsonio)
url <- "http://leafletjs.com/examples/choropleth/us-states.js"
# read as text file
doc <- readLines(url)
# remove the javascript assignment at the front
doc2 <- gsub("var statesData = ", "", doc)
# write out as a temp file and read
write(doc2, file = "tempgeo.json")write(doc2, file = "tempgeo.json")
write(doc2, file = "tempgeo.json")
states <- geojson_read("tempgeo.json", what = "sp")
name(states
)
name(states)
names(states)
m <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
library(leaflet)
library(sp)
library(mapproj)
library(maps)
library(mapdata)
library(maptools)
library(htmlwidgets)
library(magrittr)
library(XML)
library(plyr)
library(rgdal)
library(WDI)
library(raster)
library(noncensus)
library(stringr)
library(tidyr)
library(tigris)
library(rgeos)
library(ggplot2)
library(scales)
data(zip_codes)
Terror <- read.csv('global_terrorism.csv')
Terror <- subset(Terror,nkill!=0)
Terror <- subset(Terror,country_txt=='United States')
CancerRates <- read.csv('CancerCountyFIPS.csv')
Hospitals <- read.csv('Hospitals.csv')
states <- geojson_read("tempgeo.json", what = "sp")
names(CancerRates) <- tolower(names(CancerRates))
colnames(CancerRates) <- c("location", "GEOID", "rate")
CancerRates$GEOID <- formatC(CancerRates$GEOID, width = 5, format = "d", flag = "0")
CancerRates <- separate(CancerRates, location, into = c("county", "state"), sep = ", ")
CancerRates[] <- lapply(CancerRates, function(x) gsub("\\s*\\([^\\)]+\\)", "", x))
CancerRates$state <- state.abb[match(CancerRates$state,state.name)]
CancerRates$rate <- as.numeric(as.character(CancerRates$rate))
#usmap
us.map <- tigris::counties(cb = TRUE, year = 2015)
us.map <- us.map[!us.map$STATEFP %in% c("02", "15", "72", "66", "78", "60", "69",
"64", "68", "70", "74"),]
us.map <- us.map[!us.map$STATEFP %in% c("81", "84", "86", "87", "89", "71", "76",
"95", "79"),]
#merge
cancermap <- merge(us.map, CancerRates, by=c("STATEFP"))
#usmap
us.map <- tigris::counties(cb = TRUE, year = 2015)
us.map <- us.map[!us.map$STATEFP %in% c("02", "15", "72", "66", "78", "60", "69",
"64", "68", "70", "74"),]
us.map <- us.map[!us.map$STATEFP %in% c("81", "84", "86", "87", "89", "71", "76",
"95", "79"),]
#merge
#cancermap <- merge(us.map, CancerRates, by=c("STATEFP"))
#popup
popup_hos <- paste0("<strong>Hospital: </strong>",
Hospitals$NAME,
"<br><strong>Address: </strong>",
Hospitals$ADDRESS)
popup_dat <- paste0("<strong>County: </strong>",
cancermap$county,
"<br><strong>State: </strong>",
cancermap$state)
#usmap
#us.map <- tigris::counties(cb = TRUE, year = 2015)
us.map <- us.map[!us.map$STATEFP %in% c("02", "15", "72", "66", "78", "60", "69",
"64", "68", "70", "74"),]
us.map <- us.map[!us.map$STATEFP %in% c("81", "84", "86", "87", "89", "71", "76",
"95", "79"),]
#merge
#cancermap <- merge(us.map, CancerRates, by=c("STATEFP"))
#popup
popup_hos <- paste0("<strong>Hospital: </strong>",
Hospitals$NAME,
"<br><strong>Address: </strong>",
Hospitals$ADDRESS)
popup_ter <- paste0("<strong>Year: </strong>",
Terror$iyear,
"<br><strong>Attack Type: </strong>",
Terror$attacktype1_txt,
"<br><strong>Target Type: </strong>",
Terror$targtype1_txt,
"<br><strong>Death Count: </strong>",
Terror$nkill)
pal <- colorQuantile("YlOrRd", NULL, n = 9)
m <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
labels <- sprintf(
"<strong>%s</strong><br/>%g people / mi<sup>2</sup>",
states$name, states$density
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))%>%
addMarkers(data=Hospitals,lat=~LATITUDE, lng=~LONGITUDE, popup=popup_hos, group = "Hospitals",icon = makeIcon("Hos.png", "Hos-16@2x.png", 16, 16)) %>%
addMarkers(data=Terror,lat=~latitude, lng=~longitude, popup=popup_ter, group = "Terror Attack",icon = makeIcon("Nuclear.png", "Nuclear-16@2x.png", 16, 16)) %>%
# Layers control
addLayersControl(
baseGroups = c("US population density"),
overlayGroups = c("Hospitals",'Terror Attack'),
options = layersControlOptions(collapsed = FALSE)
)
saveWidget(m, 'takehome_leaflet.html', selfcontained = TRUE)
pal <- colorQuantile("YlOrRd", NULL, n = 9)
m <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
labels <- sprintf(
"<strong>%s</strong><br/>%g people / mi<sup>2</sup>",
states$name, states$density
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))%>%
addMarkers(data=Hospitals,lat=~LATITUDE, lng=~LONGITUDE, popup=popup_hos, group = "Hospitals",icon = makeIcon("Hos.png", "Hos-16@2x.png", 16, 16)) %>%
addMarkers(data=Terror,lat=~latitude, lng=~longitude, popup=popup_ter, group = "Terror Attack",icon = makeIcon("terror.png", "terror-16@2x.png", 16, 16)) %>%
# Layers control
addLayersControl(
baseGroups = c("US population density"),
overlayGroups = c("Hospitals",'Terror Attack'),
options = layersControlOptions(collapsed = FALSE)
)
saveWidget(m, 'takehome_leaflet.html', selfcontained = TRUE)
library(leaflet)
library(sp)
library(mapproj)
library(maps)
library(mapdata)
library(maptools)
library(htmlwidgets)
library(magrittr)
library(XML)
library(plyr)
library(rgdal)
library(WDI)
library(raster)
library(noncensus)
library(stringr)
library(tidyr)
library(tigris)
library(rgeos)
library(ggplot2)
library(scales)
data(zip_codes)
Terror <- read.csv('global_terrorism.csv')
Terror <- subset(Terror,nkill!=0)
Terror <- subset(Terror,country_txt=='United States')
Hospitals <- read.csv('Hospitals.csv')
states <- geojson_read("tempgeo.json", what = "sp")
#popup
popup_hos <- paste0("<strong>Hospital: </strong>",
Hospitals$NAME,
"<br><strong>Address: </strong>",
Hospitals$ADDRESS)
popup_ter <- paste0("<strong>Year: </strong>",
Terror$iyear,
"<br><strong>Attack Type: </strong>",
Terror$attacktype1_txt,
"<br><strong>Target Type: </strong>",
Terror$targtype1_txt,
"<br><strong>Death Count: </strong>",
Terror$nkill)
pal <- colorQuantile("YlOrRd", NULL, n = 9)
m <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
labels <- sprintf(
"<strong>%s</strong><br/>%g people / mi<sup>2</sup>",
states$name, states$density
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))%>%
addMarkers(data=Hospitals,lat=~LATITUDE, lng=~LONGITUDE, popup=popup_hos, group = "Hospitals",icon = makeIcon("Hos.png", "Hos-16@2x.png", 16, 16)) %>%
addMarkers(data=Terror,lat=~latitude, lng=~longitude, popup=popup_ter, group = "Terror Attack",icon = makeIcon("terror.png", "terror-16@2x.png", 16, 16)) %>%
# Layers control
addLayersControl(
baseGroups = c("US population density"),
overlayGroups = c("Hospitals",'Terror Attack'),
options = layersControlOptions(collapsed = FALSE)
)
saveWidget(m, 'takehome_leaflet.html', selfcontained = TRUE)
library(leaflet)
library(sp)
library(mapproj)
library(maps)
library(mapdata)
library(maptools)
library(htmlwidgets)
library(magrittr)
library(XML)
library(plyr)
library(rgdal)
library(WDI)
library(raster)
library(noncensus)
library(stringr)
library(tidyr)
library(tigris)
library(rgeos)
library(ggplot2)
library(scales)
data(zip_codes)
Terror <- read.csv('global_terrorism.csv')
Terror <- subset(Terror,nkill!=0)
Terror <- subset(Terror,country_txt=='United States')
Hospitals <- read.csv('Hospitals.csv')
states <- geojson_read("tempgeo.json", what = "sp")
#popup
popup_hos <- paste0("<strong>Hospital: </strong>",
Hospitals$NAME,
"<br><strong>Address: </strong>",
Hospitals$ADDRESS)
popup_ter <- paste0("<strong>Year: </strong>",
Terror$iyear,
"<br><strong>Attack Type: </strong>",
Terror$attacktype1_txt,
"<br><strong>Target Type: </strong>",
Terror$targtype1_txt,
"<br><strong>Death Count: </strong>",
Terror$nkill)
pal <- colorQuantile("YlOrRd", NULL, n = 9)
m <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
labels <- sprintf(
"<strong>%s</strong><br/>%g people / mi<sup>2</sup>",
states$name, states$density
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))%>%
addMarkers(data=Hospitals,lat=~LATITUDE, lng=~LONGITUDE, popup=popup_hos, group = "Hospitals",icon = makeIcon("Hos.png", "Hos-16@2x.png", 16, 16)) %>%
addMarkers(data=Terror,lat=~latitude, lng=~longitude, popup=popup_ter, group = "Terror Attack",icon = makeIcon("terror.png", "terror-16@2x.png", 16, 16)) %>%
# Layers control
addLayersControl(
baseGroups = c("US population density"),
overlayGroups = c("Hospitals",'Terror Attack'),
options = layersControlOptions(collapsed = FALSE)
)
saveWidget(m, 'takehome_leaflet.html', selfcontained = TRUE)
